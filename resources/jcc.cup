package mx.jcc.syntax;

import mx.jcc.syntax.AssigmentNode;
import mx.jcc.syntax.DeclarationNode;
import mx.jcc.syntax.Variable;
import mx.jcc.syntax.VariableType;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
   
action code {:
    public Map<String, VariableType> symbolTable  = new HashMap<>();
    public Map<Variable, List<List<Variable>>> valueTable  = new HashMap<>();
    public Variable initial = null;

    public void insertVariable(String name, VariableType type) {
        if (symbolTable.containsKey(name)) {
            System.err.printf("The variable %s already declared\n", name);
            return;
        }
        symbolTable.put(name, type);
        if (type == VariableType.NON_TERMINAL) {
            List<List<Variable>> list = new LinkedList<>();
            list.add(new LinkedList<>());
            valueTable.put(new Variable(name, VariableType.NON_TERMINAL), list);
        }
        System.out.printf("Var %s: %s\n", name, type);
    }

    public void nextRule(String name) {
        if (!symbolTable.containsKey(name)) {
            System.err.printf("The nonterminal %s is not declared\n", name);
            return;
        }
        if (symbolTable.get(name) != VariableType.NON_TERMINAL) {
            System.err.printf("%s is non terminal\n", name);
            return;
        }
        List<List<Variable>> rules = valueTable.get(new Variable(name, VariableType.NON_TERMINAL));
        rules.add(new LinkedList<>());
    }

    public void insertValue(String name, Variable variable) {
        if (!symbolTable.containsKey(name)) {
            System.err.printf("The nonterminal %s is not declared\n", name);
            return;
        }
        if (symbolTable.get(name) != VariableType.NON_TERMINAL) {
            System.err.printf("%s is non terminal\n", name);
            return;
        }
        Variable idx = new Variable(name, VariableType.NON_TERMINAL);
        if (initial == null) {
            initial = idx;
        }
        List<List<Variable>> rules = valueTable.get(idx);
        if (rules.size() == 0) {
            rules.add(new LinkedList<>());
        }
        List<Variable> rule = rules.get(rules.size() - 1);
        rule.add(variable);
        System.out.printf("Insert %s: %s\n", name, variable.value);
    }

    public void insertValue(String name, String vid) {
        if (!symbolTable.containsKey(vid)) {
            System.err.printf("The %s is not declared\n", name);
            return;
        }
        VariableType type = symbolTable.get(vid);
        Variable variable = new Variable(vid, type);
        insertValue(name, variable);
    }
:}

parser code {:
    public CUP$parser$actions getActions() {
        return this.action_obj;
    }

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
         if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal String VAR;
terminal String KEYWORD_NONTERM;
terminal String KEYWORD_TERMINAL;
terminal String COMMA;
terminal String FLECHA;
terminal String EOL;

non terminal DeclarationNode DT, DNT;
non terminal AssigmentNode A, CP;
non terminal Object initial, DECLS, DST, DSNT, ATT, DTT, DNTT, PRODS;

    initial ::=   DECLS PRODS;

    DECLS ::=   DST DSNT;

    DST ::= DST DTT | DTT;
    DTT ::= DT EOL;
    DT ::=  DT:e1 COMMA VAR:vid
            {:
                insertVariable(vid, e1.a);
                RESULT = new DeclarationNode(e1.a, null);
            :} |
            KEYWORD_TERMINAL:t VAR:vid
            {: 
                insertVariable(vid, VariableType.TERMINAL);
                RESULT = new DeclarationNode(VariableType.TERMINAL, null);
            :};

    DSNT ::= DSNT DNTT | DNTT;
    DNTT ::= DNT EOL;
    DNT ::=  DNT:e1 COMMA VAR:vid
            {:
                insertVariable(vid, e1.a);
                RESULT = new DeclarationNode(e1.a, null);
            :} |
            KEYWORD_NONTERM:nt VAR:vid
            {: 
                insertVariable(vid, VariableType.NON_TERMINAL);
                RESULT = new DeclarationNode(VariableType.NON_TERMINAL, null);
            :};

    PRODS ::=   PRODS ATT| ATT;
    ATT ::=  A:a EOL 
            {:
                nextRule(a.a);
                RESULT = a;
            :} | 
            CP:cp EOL
            {:
                insertValue(cp.a, Variable.EPSION);
                nextRule(cp.a);
                RESULT = cp;
            :};
    A ::=   A:a VAR:vid
            {:
                insertValue(a.a, vid);
                RESULT = a;
            :} |
            CP:cp VAR:vid
            {:
                insertValue(cp.a, vid);
                RESULT = cp;
            :};

    CP ::=  VAR:vid FLECHA
            {:
                RESULT = new AssigmentNode(vid, null);
            :};
